package com.lianren.android.basicData.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lianren.android.improve.bean.BasicBean.RangBean;
import com.lianren.android.improve.bean.ItemConvert;
import com.lianren.android.improve.bean.RangConvert;
import java.util.List;

import com.lianren.android.improve.bean.BasicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASIC".
*/
public class BasicBeanDao extends AbstractDao<BasicBean, Long> {

    public static final String TABLENAME = "BASIC";

    /**
     * Properties of entity BasicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "type");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Item = new Property(3, String.class, "item", false, "ITEM");
        public final static Property Range = new Property(4, String.class, "range", false, "RANGE");
    }

    private final ItemConvert itemConverter = new ItemConvert();
    private final RangConvert rangeConverter = new RangConvert();

    public BasicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BasicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"type\" TEXT," + // 1: type
                "\"name\" TEXT," + // 2: name
                "\"ITEM\" TEXT," + // 3: item
                "\"RANGE\" TEXT);"); // 4: range
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BasicBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        List item = entity.getItem();
        if (item != null) {
            stmt.bindString(4, itemConverter.convertToDatabaseValue(item));
        }
 
        RangBean range = entity.getRange();
        if (range != null) {
            stmt.bindString(5, rangeConverter.convertToDatabaseValue(range));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BasicBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        List item = entity.getItem();
        if (item != null) {
            stmt.bindString(4, itemConverter.convertToDatabaseValue(item));
        }
 
        RangBean range = entity.getRange();
        if (range != null) {
            stmt.bindString(5, rangeConverter.convertToDatabaseValue(range));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BasicBean readEntity(Cursor cursor, int offset) {
        BasicBean entity = new BasicBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : itemConverter.convertToEntityProperty(cursor.getString(offset + 3)), // item
            cursor.isNull(offset + 4) ? null : rangeConverter.convertToEntityProperty(cursor.getString(offset + 4)) // range
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BasicBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItem(cursor.isNull(offset + 3) ? null : itemConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setRange(cursor.isNull(offset + 4) ? null : rangeConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BasicBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BasicBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BasicBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
